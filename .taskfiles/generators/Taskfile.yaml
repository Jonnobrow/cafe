---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  :init:
    desc: Generate everything
    cmds:
      - task: generate-age-key
      - task: generate-deploy-key
      - task: generate-push-token

  # Sops encryption
  generate-age-key:
    internal: true
    cmd: age-keygen --output {{.SOPS_AGE_KEY_FILE}}
    status:
      - test -f {{.SOPS_AGE_KEY_FILE}}
    preconditions:
      - which age-keygen

  # For flux to auth with GitHub
  generate-deploy-key:
    internal: true
    cmd: ssh-keygen -t ecdsa -b 521 -C "deploy-key" -f {{.ROOT_DIR}}/github-deploy.key -q -P ""
    status:
      - test -f {{.ROOT_DIR}}/github-deploy.key
    preconditions:
      - which ssh-keygen

  # For the flux webhook
  generate-push-token:
    internal: true
    cmd: python -c "import secrets; print(secrets.token_hex(16))" > {{.ROOT_DIR}}/github-push-token.txt
    status:
      - test -f {{.ROOT_DIR}}/github-push-token.txt

  # Talos Config
  talos-bootstrap:
    desc: Bootstrap the Talos cluster
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: talos-config
      - until talhelper gencommand bootstrap | bash; do sleep 10; done
      - task: :kubeconfig
    preconditions: &talos_preconditions
      - test -f {{.ROOT_DIR}}/.sops.yaml
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.TALOS_DIR}}/talconfig.yaml
      - which talhelper talosctl sops

  talos-config:
    desc: Generate and apply Talos Config on all nodes
    dir: "{{.TALOS_DIR}}"
    cmds:
      - "[ -f talsecret.sops.yaml ] || talhelper gensecret | sops --filename-override talos/talsecret.sops.yaml --encrypt /dev/stdin > talsecret.sops.yaml"
      - talhelper genconfig
      - talhelper gencommand apply --extra-flags="--insecure" | bash
    preconditions: *talos_preconditions

  :kubeconfig:
    desc: Get the kubeconfig for the cluster
    dir: "{{.TALOS_DIR}}"
    cmds:
      - until talhelper gencommand kubeconfig --extra-flags="{{.ROOT_DIR}} --force" | bash; do sleep 10; done
    preconditions: *talos_preconditions
